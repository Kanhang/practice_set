1. 从n个排序数组中找出出现频率超过k次的数字，结果按照频率排序，如果频率相同则按数字大小排序；
2. 简历&bahavior
3. Unrolled linked list
4. Hackerrank上coding，resume（resume由key和value的集合组成，比如{name: 'xxx', skill: 'yyy'})版本更新功能，需要实现这么几个API：
update(key, value) //生成一个新的version，并存key和value，如果前面版本当中key存在的话，新的value要覆盖前面版本已经存在的value
getVersion(versionId) // 打印出某版本中所有的key-value，按照key字母顺序排序，注意最新版本要继承前面版本的key
‍‍‍‌‌‌‍‌‍‍‍‍‌‍‌‌‌‌‌
getValue(versionId, key) // 打印某版本中某个key的值
5. Code review，语言我选了js，code review一个react component代码
6. manager扯淡


. 计算不同domain的clicks数字，会给一个string array，然后然后你计算每个domain及subdomain的点击总数
2. 计算给出的两个String List中String连续最长的sublist （就卡在一个index bug上没写出来 (｡･∀･)ﾉﾞ嗨）
前期基础题 大部分都在地里出现过 不再重复，有一个新的oop的题 简单的问 inheritance 和 composition的区别

第一题是给出一个string数组，一个string，返回string中字母可以构成的数组中的string，比如[ "cat", "baby", "dog", "bird", "car", "ax" ]，"tcabnihjs" 将返回"cat"。
第二题是蠡口柒拾玖，不过方向有一点简化，只能往下和‍‍‍‌‌‌‍‌‍‍‍‍‌‍‌‌‌‌‌往右走。
第三题是第二题的follow up，有好几个string的情况下，选出可以match并且不能有重复使用的位置。

- General Programming
  - Fundamental concepts underlying the design of well-structured code.
- Web / API Concepts
  - Interactions between web servers and clients/browsers.
- Networking and Security
  - Safe remote interactions between multiple systems.
- Database Concepts and Internals
  - Design of complex data storage systems.
- Performance Issues & Troubleshooting
  - Identifying and troubleshooting issues with real services.
lz选了General Programming和Database Concepts and Internals，问了大概是这些：
OOP的什么性质让它可以处理复杂的类
有一些具体例子问你用那个data structure来实现，比如说file system lz说n-ary tree，undo/redo lz答 pair of stacks，其他的忘了，反正都挺明显的
解释下race condition
解释下idempotency 然后在数据库里怎么实现
解释下 Optimistic concurrency control
好像还有一个问题，lz记不得了
Coding就是其他人总结的那里面的，lz的第一题subdomain visits第二题longest common continuous h‍‍‍‌‌‌‍‌‍‍‍‍‌‍‌‌‌‌‌istory 第三题adclick

- General Programming
  - Fundamental concepts underlying the design of well-structured code.
- Web / API Concepts
  - Interactions between web servers and clients/browsers.
- Networking and Security
  - Safe remote interactions between multiple systems.
- Database Concepts and Internals
  - Design of complex data storage systems.
- Performance Issues & Troubleshooting
  - Identifying and troubleshooting issues with real services.
lz选了General Programming和Database Concepts and Internals，问了大概是这些：
OOP的什么性质让它可以处理复杂的类
有一些具体例子问你用那个data s‍‍‍‌‌‌‍‌‍‍‍‍‌‍‌‌‌‌‌tructure来实现，比如说file system lz说n-ary tree，undo/redo lz答 pair of stacks，其他的忘了，反正都挺明显的
解释下race condition
解释下idempotency 然后在数据库里怎么实现
解释下 Optimistic concurrency control
好像还有一个问题，lz记不得了
Coding就是其他人总结的那里面的，lz的第一题subdomain visits第二题longest common continuous history 第三题adclick

我选择的category是System internal以及Object-oriented的问题，问的完全都是上面提到的帖子中总结的问题（但是我最近看地里的面经有人反映说有的面试官提供的category里面压根就没有System internal以及Object-oriented，所以建议可以看看其他帖子多准备一些其他category的回答）。
System internal
What's the differences between thread and process? How can threads communicate with each other? How can processes communicate with each other
What's the differences in the variables allocated in heap v.s. in stack?
What's garbage collection? And what's the differences between garbage collection and traditional memory management? In what scenario garbage collection is not a good choice?
Object-oriented
What is Dependnency injection? And how it impact the complexity of class management?
Describe composition and inheritance. When should we choose one over the other? What's the tradeoff?
If we need to add a new class in the Collection framework (e.g. List, Map), what documentation do you think we need to add?

面试官问的问题并没有出现在简书的帖子上，目前我也没在地里的面经看到这个问题（可能是因为我只看了确实Karat的面经，而没有看其他公司Karat的面经。如果哪个小伙伴发现已有的面经提到了这个问题的话也欢迎在评论区放上来！）。不过所幸问的都不算难，但是我自己没能做到一遍过bug-free，我在做第二个的时候其实是稍微超时的了（面试官多给了我5min，我不确定是不是因为我们的coding环节开始得就晚了一些，所以他给我延长了），我在这个“加时阶段”终于通过console output中间过程的方式发现了bug，最后几乎是在结束前1min改了过来并且跑过了所有test cases，但是就没有时间描述时空复杂度了，希望不会影响面试结果吧。。
第一题是力扣依依遛领的变形，要求返回的不是total length of all good stirngs，而是确保说words list中最多只有一个满足条件的word，要求输出该word。如果没有符合条件的word的话就返回None。以下是我的代码实现（注释中还有说明时间复杂度，其中W为words中包含的单词个数，S为最长的word的长度）：
第一题是力扣依依遛领的变形，要求返回的不是total length of all good stirngs，而是确保说words list中最多只有一个满足条件的word，要求输出该word。如果没有符合条件的word的话就返回None。以下是我的代码实现（注释中还有说明时间复杂度，其中W为words中包含的单词个数，S为最长的word的长度）：
private String findEmbeddedWord(String[] words, String dicWord) {
    // Dictionary hashmap
    Map<Character, Integer> dicMap = new HashMap<>();
    for (int i = 0; i < dicWord.length(); ++i) { // O(S)
      char c = dicWord.charAt(i);
      dicMap.put(c, dicMap.getOrDefault(c, 0) + 1);
    }
   
    for (String word : words) { // O(W*S)
      // Word hashmap
      Map<Character, Integer> wordMap = new HashMap<>();
      for (int i = 0; i < word.length(); ++i) { // O(S)
        char c = word.charAt(i);
        wordMap.put(c, wordMap.getOrDefault(c, 0) + 1);
      }
      
      // Compare occurences
      boolean isValid = true;
      
      for (Map.Entry<Character, Integer> entry : wordMap.entrySet()) { // O(S)
        char c = entry.getKey();
        int occur = entry.getValue();
        if (occur > dicMap.getOrDefault(c, 0)) {
          isValid = false;
          continue;
        }
      }
      
      if (isValid) {
        return word;
      }
    }
   
    // Return null if none is found
    return "None";
  }
复制代码
第二题是力扣器旧的变形，区别在于：
word search的方向只能是向右还有向下，因此可以保证在一次word search中不会重复访问同一个slot，也就是不需要visited数组来记录各个slot的访问情况了。
不只是要返回能不能找到这样的word，还要把整个过程打印出来（也就是经过了的slots的坐标）。另外面试官说可以保证至少有一条这样的word search，我只需要打印出任意一条即可。
因为这道题我也没怎么写好代码，所以我就只把问题贴出来，代码的话大家可以参考力扣上的答案，进行相应的改动即可。
After catching your classroom students cheating before, you realize your students are getting craftier and hiding words in 2D grids of letters. The word may start anywhere in the grid, and consecutive letters can be either immediately below or immediately to the right of the previous letter.
Given a grid and a word, write a function that returns the location of the word in the grid as a list of coordinates. If there are multiple matches, return any one.
grid1 = [
        ['c', 'c', 'x', 't', 'i', 'b'],
        ['c', 'c', 'a', 't', 'n', 'i'],
        ['a', 'c', 'n', 'n', 't', 't'],
        ['t', 'c', 's', 'i', 'p', 't'],
        ['a', 'o', 'o', 'o', 'a', 'a'],
        ['o', 'a', 'a', 'a', 'o', 'o'],
        ['k', 'a', 'i', 'c', 'k', 'i'],
]
word1 = "catnip"
word2 = "cccc"
word3 = "s"
word4 = "bit"
word5 = "aoi"
word6 = "ki"
word7 = "aaa"
word8 = "ooo"
grid2 = [['a']]
word9 = "a"
find_word_location(grid1, word1) => [ (1, 1), (1, 2), (1, 3), (2, 3), (3, 3), (3, 4) ]
find_word_location(grid1, word2) =>
       [(0, 1), (1, 1), (2, 1), (3, 1)]
    OR [(0, 0), (1, 0), (1, 1), (2, 1)]
    OR [(0, 0), (0, 1), (1, 1), (2, 1)]
    OR [(1, 0), (1, 1), (2, 1), (3, 1)]
find_word_location(grid1, word3) => [(3, 2)]
find_word_location(grid1, word4) => [(0, 5), (1, 5), (2, 5)]
find_word_location(grid1, word5) => [(4, 5), ‍‍‍‌‌‌‍‌‍‍‍‍‌‍‌‌‌‌‌(5, 5), (6, 5)]
find_word_location(grid1, word6) => [(6, 4), (6, 5)]
find_word_location(grid1, word7) => [(5, 1), (5, 2), (5, 3)]
find_word_location(grid1, word8) => [(4, 1), (4, 2), (4, 3)]
find_word_location(grid2, word9) => [(0, 0)]
Complexity analysis variables:
r = number of rows
c = number of columns
w = length of the word
复制代码


 Self-Introduction (~ 1 min)
* Q & A (~ 10 min) (choose 2 fields, about 3 problems in every field)
* Coding (2 ~ 3 problems) with time and space complexity analysis
Q & A 环节: （楼主投的是后端工程师，给的这些领域，地里有小伙伴说可能还有其他的类型？）
1. Web application
    Building user interfaces for web services and sites
2. Production issues
    Diagnosing problems with production services
3. System internals
    How computers manage and allocate resources like CPU and memory
4.OOP
    Best practices for building classes and systems of classes
5.Testing
    Validating code and related concerns
五选二，楼主之前准备的是System internals和OOP，总体上就是根据自己的准备知识，尽量说就可以了。
贴一下楼主尽可能整理的问题和答案（不一定很准确，大家参考着自己习惯的知识上靠吧），希望能够帮助大家：
System Internals:
1 Graph(CPU usage, RAM usage), 大概就是随着time，CPU资源消耗不变, increase; How to detect; What could cause that; How to resolve?
maybe memory leak, try to find
2 Memory Leak, how to solve?
Memory Leak: some objects are referenced, but not used
    Symptoms of a Memory leak: Works fast at first, but slows over time; OutOfMemoryError after runing; There are occasionally crashes in the applications.
    Why
       1. Memory Leak Through static Fields
       2. Through Unclosed Resources
       3. Improper equals() and hashCode() Implementations
    Handle:
       1. Enable Profiling: Java profilers are tools that monitor and diagnose the memory leaks through the application.
       2. Verbose Garbage Collection: enable verbose garbage collection to track detailed trace of GC
       3. use tools like Eclipse to show warnings and errors whenever it encounters obvious cases of memory leaks
       4. use benchmarks to measure and analyze the Java code's performance after changed code.
       5. Code Reviews
3 Connection Pool Timeout
以下内容需要积分高于 150 您已经可以浏览
This value indicates the number of seconds that a connection request waits when there are no connections available in the free pool and no new connections can be created.
    Handle: Check connection pool configurations and logs about connection use/idle messages; also check code for correct usage and relasing.
4 Thread Exhausion
以下内容需要积分高于 150 您已经可以浏览
Thread exhaustion arise when you generate more tasks than your ThreadPool can handle.
    Handle: Use Asynchronous code (including async/await) with fewer threads to avoid blocking threads.
5 How do you know if you can handle 1k requests per second (now it's 1 request per second)
以下内容需要积分高于 150 您已经可以浏览
load test with mocked production data
6 操作系统中进程和线程的区别。
Both processes and threads are independent sequences of execution. The typical difference is that threads (of the same process) run in a shared memory space, while processes run in separate memory spaces.
Each process provides the resources needed to execute a program. Each process is started with a single thread, often called the primary thread, but can create additional threads from any of its threads.
A thread is an entity within a process that can be scheduled for execution.
7 What is garbage collection
Once an object is no longer referenced and therefore is not reachable by the application code, the garbage collector removes it and reclaims the unused memory.
8 stack vs heap
以下内容需要积分高于 150 您已经可以浏览
Heap memory is used by all the parts of the application whereas stack memory is used only by one thread of execution. When an object is created, it's mostly stored in the Heap space and stack memory contains the reference to it.
9 How to communicate between threads? How to communicate between processes?
以下内容需要积分高于 150 您已经可以浏览
Thread communicate via shared memory. The information is exchanged over objects by locking and notification.
The communication of the different processes with each other on the same machine use the IPC (inter process communication). IPC have different mechanism PIPE, FIFO, message queue, semaphore, shared memory etc.
10 What is the difference between garbage collection and 传统的内存管理方法?
以下内容需要积分高于 150 您已经可以浏览
Explain Garbage collection, then
Garbage collection can automatically handle the deletion of unused objects or some objects that are inaccessible to free up memory resources.
In traditional forms of memory management, programmers need to do this by themselves.
11 给一个场景不太适合使用garbage collection模型去管理内存
以下内容需要积分高于 150 您已经可以浏览
Online services which need low latency and keep communication with users(no "stop the world" time interval)
Object-oriented design:
1. 简单描述下composition 跟inheritance 以及他们的区别。
Inheritance is an "is-a" relationship. Composition is a "has-a" relationship.
Composition and Inheritance both provide code reusability by relating class.
Inheritance derives one class from another one class, composition can have an instance of another class as a field.
2.What is dependency injection(DI)? 对管理软件有什么好处?
以下内容需要积分高于 150 您已经可以浏览
Dependency Injection is a technique where an object receives other objects that it depends on.
DI is a design pattern used to implement IoC. By DI, the responsibility of creating objects is shifted from our application code to the Spring container; this phenomenon is called Inversion of Control (IoC). The injection can be constructor injection(recommended) or setter injection or field injection.
Advantages: Dependency injection makes testing easier and DI is an approach to implement loose coupling among the classes in an application.
Disadvantages: Code is difficult to trace and read in Dependency Injection, it increases complexity in the linkages between classes.
3.Polymorphism
The word polymorphism means having many forms. It describes the concept that different classes can be used with the same interface.
Advantages: It helps the programmer to reuse the codes
Disadvantages: Polymorphism reduces the readability of the program and runtime polymorphism can lead to the performance issue as machine needs to decide which method or variable to invoke
4.what is the most important object oriented programming principle for complex system
Four basic concept:
Abstraction: shows only the necessary details to the client of an object
Encapsulation: process of enclosing one or more items within a physical or logical package
Inheritance: allows us to define a class in terms of another class
Polymorphism: an instance of something in various forms
The five principles are as follows:
* S – Single Responsibility Principle (SRP): “A class should have one, and only one, reason to change.”
* O – Open Closed Principle (OCP): “You should be able to extend a classes behavior, without mod‍‍‍‌‌‌‍‌‍‍‍‍‌‍‌‌‌‌‌ifying.”
* L – Liskov Substitution Principle (LSP): “Derived classes must be substitutable for their base classes.”
* I – Interface Segregation Principle (ISP): “Clients should not be forced to depend upon interfaces that they don't use.”
* D – Dependency Inversion Principle (DIP): “Depend on abstraction, not on concretions.”
5.如果向Collection framework里面加入一个新的class. 你打算加上哪些文档?
以下内容需要积分高于 150 您已经可以浏览
跟一般API文档相比，看重的是细节，比如是否修改原数据，返回数据是否有序，接受input的range，是不是线程safe，时间空间效率等等
6.公司实现了一个数据结构，你觉得documentation里头要写啥比较好，随便讲
以下内容需要积分高于 150 您已经可以浏览
@author（只出现在类和接口的文档中）
@version（只出现在类和接口的文档中）
@param（只出现在方法或构造器的文档中）
@return（只出现在方法中）
@exception（从java1.2之后也可以使用@thrown替代）
@see
@since
@serial（也可以使用@serialField或@serialData替代）
@deprecated
more examples
7.undo/redo , which data structure is good for this?
stack
8.What is the main difference between overloading and overriding?
Overloading is static Binding, whereas Overriding is dynamic Binding. Overloading is nothing but the same method with different arguments, and it may or may not return the equal value in the same class itself.
Overriding is the same method names with the same arguments and return types associated with the class and its child class.
9. What is Static Binding and Dynamic Binding?
Binding is nothing but the association of a name with the class. Static Binding is a binding in which name can be associated with the class during compilation time, and it is also called as early Binding.
Dynamic Binding is a binding in which name can be associated with the class during execution time, and it is also called as Late Binding.
10.When would you use composition and inheritance over the other, what are some of the tradeoffs?
以下内容需要积分高于 150 您已经可以浏览
Does TypeB want to expose the complete interface (all public methods no less) of TypeA such that TypeB can be used where TypeA is expected? Indicates Inheritance. "is-a" relationship
Does TypeB want only some/part of the behavior exposed by TypeA? Indicates need for Composition. "has-a" relationship
编程题：
楼主面的是Calculator，大家可以参考地里的面经资料寻找答案，或者自己练一下
1) 给一个String只有数字，+和-，比如43+2-2，返回计算结果
2) 第一题的follow up，这次加了括号，比如(33-3)+((8-3)-(3-88))，返回计算结果 (LT 224)
3) 第二题的follow up，这次String里会有variable，比如（apple-4)+orange-(banana+3)，然后给一个map，{{banana: 4}, {apple : 9}}，不是所有的variable都有值，这个例子就会返回5+orange-7。
最后祝大家面试顺利哈！

https://www.jianshu.com/p/fdbcba5fe5bc


1.Which Principle that you are using, and why?
2.undo/redo , which data structure is good for this?
3.boolean flag. if you have too much flag, how to store in limited space device? which data structure is good for that.
4. how do you do the performance test and load test?



遇到一些production 的metrics怎么debug什么的。




Testing
1. When and Why using mocks and when and why do not use mock?
2. If you find your test is quite slow, how to deal with it?
1. 力扣巴巴一，原题
2. 力扣七伊芭，基本一样，但是要返回最长公共数组的内容，不是长度。基本就是在DP解法上记录maxLength, 和对应的maxLengthStartIdx. 最后返回从maxLengthStartIdx到maxLengthStartIdx + maxLength - 1之间的子数组。
3. Ad clicks, 参考这个面经。主要是用HashMap, HashSet. 实在没时间，就说了想法。